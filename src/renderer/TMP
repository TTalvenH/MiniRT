

	static t_float3 sphere_pos[] = {
		{0.0f, 0.0f, 0.0f},
		{-0.5f, 0.0f, 0.0f},
		{0.0f, 0.0f, 0.5f},
		{0.0f, 0.0f, -0.5f},
	};

	float rad = 0.2f;

	t_float3 sphere_view_coord[4];
	t_float3 sphere_col[] = {
		(t_color){0.75f, 0.1f, 0.1f},
		(t_color){0.1f, 0.75f, 0.1f},
		(t_color){0.1f, 0.1f, 0.75f},
		ft_float3_scalar((t_color){1.0f, 1.0f, 1.0f}, 1.0f),
	};

	t_float3 light_dir = {1.0f, -1.0f, -1.0};
	light_dir = ft_float3_normalize(light_dir);
	t_float3 light_color = {1.0f, 1.0f, 1.0f};
	float light_intensity = 1.0f;

	unsigned int y = 0;
	while (y < out->height)
	{
		unsigned int x = 0;
		while (x < out->width)
		{
			t_float3 p;
			p.x = ((float)x + 0.5f) / (float)out->width * 2 - 1;
			p.y = ((float)y + 0.5f) / (float)out->height * 2 - 1;
			p.x *= (float)out->height / (float)out->width;
			p.z = -1.0f;
			p = ft_float3_normalize(p);

			t_ray ray = {{}, p};
			
			int hit_index = -1;
			float mul = 500.0f;
			for (int i = 0; i < 4; ++i)
			{
				float m = ray_sphere_intersect(&ray, sphere_view_coord[i], rad);
				if (m > 0 && m <= mul)
				{
					hit_index = i;
					mul = m;
				}
			}

			t_argb32 final_color = 0xFF;
			if (hit_index != -1)
			{
				t_float3 normal = ft_float3_scalar(ray.direction, mul);
				normal = ft_float3_add(ray.origin, normal); 
				normal = ft_float3_sub(normal, sphere_view_coord[hit_index]);
				normal = ft_float3_normalize(normal);

				t_color diffuse = sphere_col[hit_index];
				diffuse.x = powf(diffuse.x, 2.2f);
				diffuse.y = powf(diffuse.y, 2.2f);
				diffuse.z = powf(diffuse.z, 2.2f);

				t_color dir_color = light_color;
				dir_color = ft_float3_scalar(dir_color, light_intensity);
				dir_color.x = powf(dir_color.x, 2.2f);
				dir_color.y = powf(dir_color.y, 2.2f);
				dir_color.z = powf(dir_color.z, 2.2f);

				float dir_light_intensity = ft_float3_dot(normal, ft_float3_scalar(light_dir, -1.0f));
				dir_light_intensity = ft_maxf(0.0f, dir_light_intensity);
				dir_color = ft_float3_scalar(dir_color, dir_light_intensity);

				t_color amb_light = (t_color){0.25f, 0.25f, 0.25f};
				amb_light.x = powf(amb_light.x, 2.2f);
				amb_light.y = powf(amb_light.y, 2.2f);
				amb_light.z = powf(amb_light.z, 2.2f);
				 
				t_color light_total = ft_float3_add(dir_color, amb_light);

				t_float3 diff_color; 
				diff_color.x = ft_clamp(powf(diffuse.x * light_total.x, 1.1 / 2.2f), 0.0f, 1.0f);
				diff_color.y = ft_clamp(powf(diffuse.y * light_total.y, 1.1 / 2.2f), 0.0f, 1.0f);
				diff_color.z = ft_clamp(powf(diffuse.z * light_total.z, 1.1 / 2.2f), 0.0f, 1.0f);

//				diff_color = ft_float3_scalar(diff_color, 2.2f);

				final_color = color_to_argb32(diff_color);
			}
			
			//hit.x = (hit.x + 1) * 0.5f;
			//hit.y = (hit.y + 1) * 0.5f;
			//hit.z = (hit.z + 1) * 0.5f;
			//col = (int)(hit.x * 255.0f) << 16 | (int)(hit.y * 255.0f) << 8 | (int)(hit.z * 255.0f);

			mlx_put_pixel(out, x, out->height - y - 1, final_color);

			++x;
		}
		++y;
	}
